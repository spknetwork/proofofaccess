name: Build and Release

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 0.2.0)'
        required: true
        type: string

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.VERSION }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            # Extract version from tag
            VERSION="${{ github.ref_name }}"
            VERSION="${VERSION#v}"  # Remove 'v' prefix
          else
            # Auto-increment patch version for automatic builds
            LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
            VERSION=$(echo $LATEST_TAG | sed 's/v//' | awk -F. '{print $1"."$2"."$3+1}')
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"

      - name: Update version in code
        run: |
          # Update version in main.go
          sed -i "s/Version.*=.*\".*\"/Version   = \"${{ steps.version.outputs.VERSION }}\"/" main.go
          
          # Get build info
          BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          COMMIT_ID=$(git rev-parse --short HEAD)
          
          # Build with version info
          LDFLAGS="-X main.Version=${{ steps.version.outputs.VERSION }} -X main.BuildTime=$BUILD_TIME -X main.CommitID=$COMMIT_ID"
          echo "LDFLAGS=$LDFLAGS" >> $GITHUB_ENV

      - name: Build binaries
        run: |
          mkdir -p dist
          
          # Get LDFLAGS from env
          LDFLAGS="${{ env.LDFLAGS }}"
          
          # Linux AMD64
          GOOS=linux GOARCH=amd64 go build -ldflags "$LDFLAGS" -o dist/proofofaccess-linux-amd64 .
          
          # Linux ARM64
          GOOS=linux GOARCH=arm64 go build -ldflags "$LDFLAGS" -o dist/proofofaccess-linux-arm64 .
          
          # Darwin AMD64
          GOOS=darwin GOARCH=amd64 go build -ldflags "$LDFLAGS" -o dist/proofofaccess-darwin-amd64 .
          
          # Darwin ARM64
          GOOS=darwin GOARCH=arm64 go build -ldflags "$LDFLAGS" -o dist/proofofaccess-darwin-arm64 .
          
          # Windows AMD64
          GOOS=windows GOARCH=amd64 go build -ldflags "$LDFLAGS" -o dist/proofofaccess-windows-amd64.exe .
          
          # Create checksums
          cd dist && sha256sum * > checksums.txt
          
          # List files for debugging
          echo "Files in dist directory:"
          ls -la .

      - name: Create Release
        if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || format('v{0}', steps.version.outputs.VERSION) }}
          name: Release v${{ steps.version.outputs.VERSION }}
          body: |
            ## ProofOfAccess v${{ steps.version.outputs.VERSION }}
            
            ### Installation
            
            1. Download the appropriate binary for your platform
            2. Make it executable: `chmod +x proofofaccess-*`
            3. Run with `-version` flag to verify: `./proofofaccess -version`
            
            ### Usage
            ```bash
            # Storage node
            ./proofofaccess -node 2 -username YOUR_USERNAME -IPFS_PORT=5001 -useWS -url=https://spktest.dlux.io
            
            # Validator node
            ./proofofaccess -node 1 -username YOUR_USERNAME -IPFS_PORT=5001
            ```
            
            ### Checksums
            SHA256 checksums are provided in `checksums.txt`
          files: |
            dist/**/*
          fail_on_unmatched_files: false
          draft: false
          prerelease: false
          generate_release_notes: true

      - name: Upload artifacts to workflow
        uses: actions/upload-artifact@v4
        with:
          name: proofofaccess-binaries
          path: dist/
          retention-days: 7